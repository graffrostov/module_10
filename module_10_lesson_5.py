"""
Домашнее задание по теме "Многопроцессное программирование"
Если вы решали старую версию задачи, проверка будет производиться по ней.
Ссылка на старую версию тут.
Цель: понять разницу между линейным и многопроцессным подходом, выполнив операции обоими способами.

Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.
Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов. Измерьте время выполнения и выведите его в консоль.
Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно закомментировав другой.

Пример результата выполнения программы:
Выполняемый код:
def read_info(name):
...
filenames = [f'./file {number}.txt' for number in range(1, 5)]

# Линейный вызов

# Многопроцессный

Вывод на консоль, 2 запуска (результаты могут отличаться):
0:00:03.046163 (линейный)
0:00:01.092300 (многопроцессный)

Примечания:
Используйте конструкцию if __name__ == '__main__' при многопроссном подходе.
Выводить или возвращать список all_data в функции не нужно. Можете сделать это, но кол-во информации в файлах достигает - 10^9 строк.
Дополнительно о классе Pool можете прочитать здесь.
Файл module_10_5.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.


"""


import time
from multiprocessing import Pool


def read_info(name):
    all_data = []
    with open(name, 'r', encoding='utf-8') as file:
        for line in file:
            all_data.append(line)


# def read_info_v2(name):
#     all_data = []
#     with open(name, 'r', encoding='utf-8') as file:
#         while file.readline():
#             all_data.append(file.readline())




filenames = [f'./file {number}.txt' for number in range(1, 5)]


if __name__ == '__main__':

# Линейный вызов
    stat_time_line = time.time()

    for file in filenames:
        read_info(file)

    end_time_line = time.time()
    print(f'Линейный вызов занял {end_time_line-stat_time_line} секунд')

    # stat_time_line = time.time()
    # for file in filenames:
    #     read_info_v2(file)
    # end_time_line = time.time()
    # print(f'Линейный вызов занял {end_time_line-stat_time_line} секунд')

# Многопроцессный

    stat_time_line = time.time()

    with Pool(processes=len(filenames)) as pool:
        pool.map(read_info,filenames)

    end_time_line = time.time()

    print(f'Многопроцессный вызов занял {end_time_line-stat_time_line} секунд')

